package com.visarut.myapplication.view.feature.featureHomeimport android.util.Logimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.visarut.myapplication.data.response.Coinimport com.visarut.myapplication.data.response.CoinDetailimport com.visarut.myapplication.data.response.Statsimport com.visarut.myapplication.domain.usecase.CoinUseCaseimport kotlinx.coroutines.launchclass HomeViewModel(    private val coinUseCase: CoinUseCase) : ViewModel() {    val coinList: MutableLiveData<List<Coin>> = MutableLiveData()    private val coinDetail: MutableLiveData<CoinDetail> = MutableLiveData()    private val coinStat: MutableLiveData<Stats> = MutableLiveData()    val isShowTopRank = MutableLiveData(true)    val isShowSkeleton = MutableLiveData(true)    companion object {        const val DEFAULT_OFFSET = 0        const val DEFAULT_LIMIT = 20        var isLoadMore = true    }    init {        fetchCoin()    }    fun fetchCoin() {        viewModelScope.launch {            coinUseCase.getCoin(DEFAULT_OFFSET, DEFAULT_LIMIT).data.apply {                coinList.value = this.coins                coinStat.value = this.stats            }            hideSkeleton()        }    }    fun fetchCoinDetail(coinUUID: String): CoinDetail? {        viewModelScope.launch {            coinDetail.value = coinUseCase.getCoinDetail(coinUUID).data.coin        }        return coinDetail.value    }    fun clearData() {        coinList.postValue(emptyList())    }    fun isLoadMore(): Boolean {        val currentListSize = coinList.value?.size ?: 0        isLoadMore = currentListSize < coinStat.value?.total ?: 0        return isLoadMore    }    fun fetchMoreCoin() {        val currentListSize = coinList.value?.size ?: 0        viewModelScope.launch {            val response = coinUseCase.getCoin(currentListSize, DEFAULT_LIMIT)            var tempObj = coinList.value            val oldList = tempObj?.toMutableList()            val newList = response.data.coins            oldList?.addAll(newList)            tempObj = oldList            tempObj.apply {                coinList.value = this                isLoadMore()            }        }    }    fun searchCoin(query: String) {        if(query.isNotEmpty()) {            viewModelScope.launch {                coinList.value = coinUseCase.searchCoin(query).data.coins            }        }    }    fun hideTopRank() {        isShowTopRank.postValue(false)    }    fun showTopRank() {        isShowTopRank.postValue(true)    }    fun showSkeleton() {        isShowSkeleton.postValue(true)    }    fun hideSkeleton() {        isShowSkeleton.postValue(false)    }}